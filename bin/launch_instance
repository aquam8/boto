#!/System/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
# Copyright (c) 2009 Chris Moyer http://coredumped.org/
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish, dis-
# tribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the fol-
# lowing conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-
# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS

#
# Utility to launch an EC2 Instance
#
VERSION = "0.2"

import boto.utils
import re, os

if __name__ == "__main__":
    try:
        import readline
    except ImportError:
        pass
    import sys
    import time
    import boto
    from boto.ec2 import regions
    from optparse import OptionParser
    from boto.mashups.iobject import IObject
    parser = OptionParser(version=VERSION, usage="%prog [options] config_url")
    parser.add_option("-c", "--max-count", help="Maximum number of this type of instance to launch", dest="max_count", default="1")
    parser.add_option("--min-count", help="Minimum number of this type of instance to launch", dest="min_count", default="1")
    parser.add_option("-g", "--groups", help="Security Groups to add this instance to", action="append", dest="groups")
    parser.add_option("-a", "--ami", help="AMI to launch", dest="ami_id")
    parser.add_option("-t", "--type", help="Type of Instance (default m1.small)", dest="type", default="m1.small")
    parser.add_option("-k", "--key", help="Keypair", dest="key_name")
    parser.add_option("-m", "--monitoring_enabled", help="Enable Cloudwatch on this instance", dest="monitoring_enabled", default=False, action="store_true")
    parser.add_option("-z", "--zone", help="Zone (default us-east-1a)", dest="zone", default="us-east-1a")
    parser.add_option("-r", "--region", help="Region (default us-east-1)", dest="region", default="us-east-1")
    parser.add_option("-i", "--ip", action="store_true", help="Elastic IP", dest="elastic_ip")
    parser.add_option("-w", "--wait", help="Wait until instance is running", default=False, action="store_true", dest="wait")
    parser.add_option("-d", "--dns", help="Returns public and private DNS (implicates --wait)", default=False, action="store_true", dest="dns")
    parser.add_option("-T", "--tag", help="Set tag (implicates --wait)", default=None, action="append", dest="tags", metavar="key:value")
    parser.add_option("-s", "--scripts", help="file that contains the user-data you want to start the instance with", dest="scripts")

    (options, args) = parser.parse_args()


    for r in regions():
        if r.name == options.region:
            region = r
            break
    else:
        print "Region %s not found." % options.region
        sys.exit(1)
    ec2 = boto.connect_ec2(region=region)

    iobj = IObject()
    if options.ami_id:
        ami = ec2.get_image(options.ami_id)
    else:
        ami_id = options.ami_id
        l = [(a, a.id, a.location) for a in ec2.get_all_images()]
        ami = iobj.choose_from_list(l, prompt='Choose AMI')

    if options.key_name:
        key_name = options.key_name
    else:
        l = [(k, k.name, '') for k in ec2.get_all_key_pairs()]
        key_name = iobj.choose_from_list(l, prompt='Choose Keypair').name

    available_elastic_ips = []
    if options.elastic_ip:
        for a in ec2.get_all_addresses(): 
            if a.instance_id is "":
                available_elastic_ips.append(a.public_ip)

    print "Preallocated Elastic_ips" , available_elastic_ips


    if options.groups:
        groups = options.groups
    else:
        groups = []
        l = [(g, g.name, g.description) for g in ec2.get_all_security_groups()]
        g = iobj.choose_from_list(l, prompt='Choose Primary Security Group')
        while g != None:
            groups.append(g)
            l.remove((g, g.name, g.description))
            g = iobj.choose_from_list(l, prompt='Choose Additional Security Group (0 to quit)')

    user_data = ""
    if options.scripts:
        f = open(options.scripts, "r")
        user_data = f.read()
        f.close()


    shutdown_proc = "terminate"

    r = ami.run(min_count=int(options.min_count), max_count=int(options.max_count),
            key_name=key_name, user_data=user_data,
            security_groups=groups, instance_type=options.type,
            placement=options.zone, instance_initiated_shutdown_behavior=shutdown_proc,
            monitoring_enabled=options.monitoring_enabled)

    login_lines = []
    for instance in r.instances:
        print "Instance ID: %s" % instance.id
        if options.dns:
            options.wait = True
        
        if options.tags:
            options.wait = True
        
        if not options.wait:
            sys.exit(0)
        
        while True:
            instance.update()
            if instance.state == 'running':
                break
            time.sleep(3)
        
        if options.dns:
            print "Public DNS name: %s" % instance.public_dns_name
            print "Private DNS name: %s" % instance.private_dns_name
            login_lines.append("ssh -i %s.pem root@%s" % (options.key_name, instance.public_dns_name))
        
        if options.tags:
            for tag_pair in options.tags:
                name = tag_pair
                value = ''
                if ':' in tag_pair:
                    name, value = tag_pair.split(':', 1)
                instance.add_tag(name, value)
        
        if options.elastic_ip:
            try:
                elastic_ip = available_elastic_ips.pop()
            except IndexError:
                elastic_ip = ec2.allocate_address()
                print "Allocating new Elastic IP address: %s" % elastic_ip
            if instance.use_ip(elastic_ip):
                print "Associated Elastic IP address: %s with instance %s" % (elastic_ip, instance.id)
              
    for login_line in login_lines:
        print login_line
